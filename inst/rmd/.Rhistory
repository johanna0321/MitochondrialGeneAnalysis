"metap", "stringr", "cowplot")
for (lib_name in session_packages){
tryCatch({library(lib_name,character.only = T)}, error = function(e) {
print(paste("Cannot load",lib_name,", please install"))
})
}
# TEMP UNTIL I CAN DO AN INSTALL PACKAGE
devtools::load_all("/Users/johf/Documents/GitHub/MitochondrialFunctionAnalyses")
data(expected.counts.meta)
data(expected.counts)
data(gene_name_conversion)
knitr::opts_chunk$set(echo = TRUE, out.height='50%',out.width='50%')
# Verify that all samples are the same and are in the same order
if(!all(colnames(expected.counts) %in% rownames(expected.counts.meta)) &&
!all(colnames(expected.counts) == rownames(expected.counts.meta))){
warning("Count and metadata dataframes not ordered - ordering now")
reorder_idx <- match(rownames(expected.counts.meta),colnames(expected.counts))
expected.counts <- expected.counts[, reorder_idx]
if(!all(colnames(expected.counts) %in% rownames(expected.counts.meta)) &&
!all(colnames(expected.counts) == rownames(expected.counts.meta))){
stop("Problem with count and metadata dataframes")
}
}
all_transcriptomic_data <- list(Male_Line_Effect = list(),
Female_Line_Effect = list(),
Sex_Effect = list())
for(i in c("Male_Line_Effect","Female_Line_Effect","Sex_Effect")) {
print(paste0("----------Starting ", i,"----------"))
# Define contrast
if(i == "Male_Line_Effect"){
expected.counts.meta.temp <- expected.counts.meta %>%
dplyr::filter(Sex == "Male")
expected.counts.temp <- expected.counts[,rownames(expected.counts.meta.temp)]
temp_form <- "~ Exp + Line"
temp_cont <- c("Line","HCR","LCR")
} else if(i == "Female_Line_Effect") {
expected.counts.meta.temp <- expected.counts.meta %>%
dplyr::filter(Sex == "Female")
expected.counts.temp <- expected.counts[,rownames(expected.counts.meta.temp)]
temp_form <- "~ Exp + Line"
temp_cont <- c("Line","HCR","LCR")
} else {
expected.counts.meta.temp <- expected.counts.meta %>%
dplyr::filter(Exp == "6548")
expected.counts.temp <- expected.counts[,rownames(expected.counts.meta.temp)]
temp_form <- "~ Line + Sex"
temp_cont <- c("Sex","Male","Female")
}
# Set up differential expression experiment design
# For each sex, we want the Line effect, adjusted for Experiment
dds <- DESeq2::DESeqDataSetFromMatrix(countData = expected.counts.temp,
colData = expected.counts.meta.temp,
design = stats::as.formula(temp_form))
# Only keep genes with > 10 counts across all samples to remove noise
keep <- rowSums( counts(dds) ) >= 10
dds <- dds[keep,]
# Run DESeq command on the summarized experiment file
dds <- DESeq2::DESeq(dds)
# Extract results for Line contrast and set up data frame
res <- DESeq2::results(dds, contrast=temp_cont) %>%
as.data.frame()
res <- cbind("gene_id" = row.names(res), res)
# Bind to other usable gene names for pathway and MitoCarta analysis
degs <- right_join(gene_name_conversion, res, by = "gene_id")
# Pathway analysis
sigvals <- as.numeric(degs$pvalue)
geneids <- as.numeric(degs$entrezgene_id)
pathways <- LRpath(sigvals, geneids, min.g=10, max.g=NA, sig.cutoff=0.05,
functionalCategories="KEGG",
odds.min.max=c(0.001,0.5), species="rno")
all_transcriptomic_data[[i]] <- list(DEGs = degs, Pathways = pathways)
}
# I first combined the male and female datasets into one dataframe, and label the
# significant genes, for faceted plotting in ggplot
line_maleonly <- all_transcriptomic_data[["Male_Line_Effect"]][["DEGs"]] %>%
dplyr::mutate(Sex = "Male")
line_femaleonly <- all_transcriptomic_data[["Female_Line_Effect"]][["DEGs"]] %>%
dplyr::mutate(Sex = "Female")
line_genes_by_sex <- rbind(line_maleonly, line_femaleonly) %>%
dplyr::mutate(Significant = ifelse(padj < 0.05, "Yes", "No"))
# Make volcano plot
ggplot2::ggplot(line_genes_by_sex,
aes(x = log2FoldChange, y = -log10(padj),
color = interaction(Sex,Significant)
)) +
geom_point(size = 0.5) +
geom_hline(yintercept = 0, color = "grey", linetype = "dashed") +
geom_vline(xintercept = 0, color = "grey", linetype = "dashed") +
xlim(-10,10) +
ylab(expression('-log'[10]*'(p-value)')) +
xlab(expression('log'[2]*'(Fold Change)')) +
scale_color_manual(values = c("black","black","#CD534CFF","#0073C2FF")) +
theme(axis.line = element_line(colour="black"),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_text(size=12, color = "black"),
legend.position = "none",
aspect.ratio = 0.8,
panel.grid.major = element_blank()) +
facet_wrap(~Sex)
# I wanted to see the overlap in significant genes between male and female
significant_female_genes <- line_genes_by_sex %>%
dplyr::filter(Significant == "Yes", Sex == "Female") %>% pull(gene_id)
significant_male_genes <- line_genes_by_sex %>%
dplyr::filter(Significant == "Yes", Sex == "Male") %>% pull(gene_id)
venn_diagram_data <- list(significant_female_genes, significant_male_genes)
names(venn_diagram_data) <- c("Female (p < 0.05)", "Male (p < 0.05)")
ggvenn(venn_diagram_data, fill_color = c("#CD534CFF","#0073C2FF"),
stroke_size = 0.5, set_name_size = 5)
# I first combined the male and female datasets into one dataframe, and filter
# for the significant pathways
lrpath_maleonly <- all_transcriptomic_data[["Male_Line_Effect"]][["Pathways"]] %>%
dplyr::mutate(Sex = "Male")
lrpath_femaleonly <- all_transcriptomic_data[["Female_Line_Effect"]][["Pathways"]] %>%
dplyr::mutate(Sex = "Female")
lrpath_by_sex <- rbind(lrpath_maleonly, lrpath_femaleonly)
# Determine the significant pathways for each sex and fild the union
pathways_male <- lrpath_maleonly %>%
dplyr::filter(FDR < 0.05) %>%
dplyr::pull(category.description)
pathways_female <- lrpath_femaleonly %>%
dplyr::filter(FDR < 0.05) %>%
dplyr::pull(category.description)
pathways_both <- generics::union(pathways_male, pathways_female)
lrpath_by_sex <- lrpath_by_sex %>%
filter(category.description %in% pathways_both) %>%
dplyr::select(category.description, odds.ratio, Sex) %>%
arrange(odds.ratio) %>%
mutate(category.description = factor(category.description, as.character(unique(category.description))))
ggplot(lrpath_by_sex) +
geom_col(aes(y = category.description, x = odds.ratio, fill = Sex),
position = position_dodge2(padding = 0)) +
scale_fill_manual(values = c("#CD534CFF","#0073C2FF")) +
xlab("Odds Ratio") +
ylab("") +
geom_vline(xintercept=1, color = "grey", linetype = "dashed") +
ggtitle(paste0("Significant Line Pathways")) +
theme(axis.line = element_line(colour="black"),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text = element_text(size=10, color = "black"),
axis.title = element_text(size=12, color = "black"),
aspect.ratio = 4,
panel.grid.major = element_blank())
# Merge male and female gene expression data frames and reassign column names
all_dfs <- all_transcriptomic_data[["Female_Line_Effect"]][["DEGs"]] %>%
dplyr::select(c("gene_id","entrezgene_id","external_gene_name","description","log2FoldChange","padj")) %>%
dplyr::left_join(., all_transcriptomic_data[["Male_Line_Effect"]][["DEGs"]][,c("gene_id","log2FoldChange","padj")], by = "gene_id") %>%
dplyr::rename(log2FC_F = log2FoldChange.x, padj_F = padj.x, log2FC_M = log2FoldChange.y, padj_M = padj.y)
#####################################################
##                                                 ##
##    User-friendly functions for performing       ##
##    MitoCarta pathway assignment and analysis    ##
##    on a provided list of gene symbols, IDs,     ##
##   or Uniprot IDs (see function documentation).  ##
##                                                 ##
#####################################################
# Extract MitoCarta data from website; available species are mouse and human
mitocarta_data <- extract_mitocarta_data(species = "mouse",
gene_id_type = "gene_symbol"
)
# Format mitocarta_data for subsequent pathway analysis
#mitocarta_data <- format_mitocarta_data(
#  mitocarta_data = mitocarta_data,
#  gene_id_type = "gene_symbol",
#  species = "mouse"
#  )
# If providing a list of NCBI gene names, optionally check if any missing names
# are listed as a synonym by MitoCarta. Recommended.
gene_names_checked <- check_mitocarta_synonyms(
gene_names = all_dfs$external_gene_name,
mitocarta_data = mitocarta_data
)
# Assigned pathways to gene names using mitocarta_data_formatted
mitocarta_data <- assign_mitocarta_pathways(
gene_names = gene_names_checked$mitocarta_id,
mitocarta_data = mitocarta_data
)
#####################################################
# General steps for merging dataframes and outputting .txt file
data_all <- gene_names_checked %>%
rename(external_gene_name = given_id, Name = mitocarta_id) %>%
right_join(., all_dfs, by = "external_gene_name") %>%
left_join(., mitocarta_data[["Assigned_Pathways"]], by = "Name")
# Add mean logFC between male and female
# Perform Fisher method to combine adjusted p-values for female and male
data_all$log2FC_mean <- sapply(1:nrow(data_all), function(x) {
mean(c(data_all$log2FC_F[x],data_all$log2FC_M[x]))}
)
data_all$padj_fisher_combined <- sapply(1:nrow(data_all), function(x) {
ifelse(!is.na(data_all$padj_F[x])&&(!is.na(data_all$padj_F[x])), metap::sumlog(c(data_all$padj_F[x],data_all$padj_F[x]))$p, NA)}
)
# Save .txt file
#write.csv(data_all, paste0(local_path,"Mitochondrial_Paper_Data.csv"))
# Specific steps taken for my data put into MitoCarta analysis
# Remove any genes with non equal direction of effect or no pathway assignment
# Filter for combined p-value (Fisher) < 0.05
data_filtered <- data_all %>%
filter(!is.na(Main.Path)) %>%
filter(padj_fisher_combined < 0.05) %>%
filter(sign(log2FC_M) == sign(log2FC_F))
print(paste0("Of ",length(mitocarta_data$MitoCarta_MitoGenes$Symbol)," mitochondrial genes annotated by MitoCarta, ",
table(mitocarta_data$MitoCarta_MitoGenes$Symbol %in%
na.omit(gene_names_checked$mitocarta_id))[[2]], " (",
round(table(mitocarta_data$MitoCarta_MitoGenes$Symbol %in%
na.omit(gene_names_checked$mitocarta_id))[[2]]/length(mitocarta_data$MitoCarta_MitoGenes$Symbol),3)*100, "%) of these genes were present in the provided dataset"))
print(paste0("This filter results in a dataset with ", length(unique(data_filtered$gene_id)), " mitochondrial genes that are significantly differentially expressed between HCR and LCR when sexes are combined"))
local_path
getwd()
View(data_all)
write.csv(data_all, file = "/Users/johf/Desktop/Mitochondrial_Paper_Data.csv")
View(mitocarta_data)
##################################################
##                                              ##
##    User-friendly function for graphing       ##
##     the number of genes in a filtered        ##
##    dataset or the percentage of genes in     ##
##   in this dataset that occupy a pathway      ##
##                                              ##
##################################################
bar_graphs_mitocarta <- list()
for(plot_name in c("Primary","OXPHOS","Metabolism","Metals and cofactors",
"Lipid metabolism", "Carbohydrate metabolism", "Amino acid metabolism")){
temp_plot <- plot_mitocarta_pathways(filtered_data = data_filtered,
mitocarta_data = mitocarta_data,
subpath = plot_name,
fc_name = "log2FC_mean")
bar_graphs_mitocarta[[plot_name]] <- temp_plot
print(temp_plot[["GeneNumber"]])
temp_plot_no_legend <- temp_plot[["PathwayPercent"]] + ggplot2::theme(legend.position = "none")
print(temp_plot_no_legend)
}
logFC_legend <- cowplot::get_legend(temp_plot[["PathwayPercent"]])
grid.newpage()
grid.draw(logFC_legend)
pathway_genes <- mitocarta_data[["MitoCarta_Pathways"]] %>%
dplyr::filter(.data$MitoPathway == "Metabolism") %>%
dplyr::mutate(Genes = stringr::str_split(.data$Genes, ",", n = Inf, simplify = F)) %>%
dplyr::pull(.data$Genes)
View(pathway_genes)
length(pathway_genes)
length(pathway_genes[[1]])
# TEMP UNTIL I CAN DO AN INSTALL PACKAGE
devtools::load_all("/Users/johf/Documents/GitHub/MitochondrialFunctionAnalyses")
##################################################
##                                              ##
##    User-friendly function for graphing       ##
##     the number of genes in a filtered        ##
##    dataset or the percentage of genes in     ##
##   in this dataset that occupy a pathway      ##
##                                              ##
##################################################
bar_graphs_mitocarta <- list()
for(plot_name in c("Primary","OXPHOS","Metabolism","Metals and cofactors",
"Lipid metabolism", "Carbohydrate metabolism", "Amino acid metabolism")){
temp_plot <- plot_mitocarta_pathways(filtered_data = data_filtered,
mitocarta_data = mitocarta_data,
subpath = plot_name,
fc_name = "log2FC_mean")
bar_graphs_mitocarta[[plot_name]] <- temp_plot
print(temp_plot[["GeneNumber"]])
temp_plot_no_legend <- temp_plot[["PathwayPercent"]] + ggplot2::theme(legend.position = "none")
print(temp_plot_no_legend)
}
logFC_legend <- cowplot::get_legend(temp_plot[["PathwayPercent"]])
grid.newpage()
grid.draw(logFC_legend)
View(data_all)
View(mitocarta_data)
View(mitocarta_data[["MitoCarta_Pathways"]])
View(bar_graphs_mitocarta)
?ggsave()
print(bar_graphs_mitocarta)[["GeneNumber"]])
print(bar_graphs_mitocarta[["GeneNumber"]])
View(bar_graphs_mitocarta)
print(bar_graphs_mitocarta[["Primary"]][["GeneNumber"]])
# TEMP UNTIL I CAN DO AN INSTALL PACKAGE
devtools::load_all("/Users/johf/Documents/GitHub/MitochondrialFunctionAnalyses")
##################################################
##                                              ##
##    User-friendly function for graphing       ##
##     the number of genes in a filtered        ##
##    dataset or the percentage of genes in     ##
##   in this dataset that occupy a pathway      ##
##                                              ##
##################################################
bar_graphs_mitocarta <- list()
for(plot_name in c("Primary","OXPHOS","Metabolism","Metals and cofactors",
"Lipid metabolism", "Carbohydrate metabolism", "Amino acid metabolism")){
temp_plot <- plot_mitocarta_pathways(filtered_data = data_filtered,
mitocarta_data = mitocarta_data,
subpath = plot_name,
fc_name = "log2FC_mean")
bar_graphs_mitocarta[[plot_name]] <- temp_plot
print(temp_plot[["GeneNumber"]])
temp_plot_no_legend <- temp_plot[["PathwayPercent"]] + ggplot2::theme(legend.position = "none")
print(temp_plot_no_legend)
}
logFC_legend <- cowplot::get_legend(temp_plot[["PathwayPercent"]])
grid.newpage()
grid.draw(logFC_legend)
print(bar_graphs_mitocarta$Primary$GeneNumber)
paste0(names(bar_graphs_mitocarta[1]),names(bar_graphs_mitocarta[1]))
paste0(names(bar_graphs_mitocarta[1]),names(bar_graphs_mitocarta[1][1]))
names(bar_graphs_mitocarta[1])
names(bar_graphs_mitocarta)[1]
names(bar_graphs_mitocarta)[[1]]
names(bar_graphs_mitocarta)[[1]]
names(bar_graphs_mitocarta)[[1]][["GeneNumber"]]
print(bar_graphs_mitocarta[["Primary"]][["GeneNumber"]])
print(bar_graphs_mitocarta[["Primary"]][["PathwayPercent"]])
w = list(`Primary` = 416,
`OXPHOS` = 354,
`Metabolism` = 339,
`Metals and cofactors` = 437,
`Lipid metabolism` = 408,
`Carbohydrate metabolism` = 352,
`Amino acid metabolism` = 473
)
h = list(`Primary` = 186,
`OXPHOS` = 217,
`Metabolism` = 217,
`Metals and cofactors` = 264,
`Lipid metabolism` = 183,
`Carbohydrate metabolism` = 216,
`Amino acid metabolism` = 264
)
View(h)
h[["Metabolism"]]
# TEMP UNTIL I CAN DO AN INSTALL PACKAGE
devtools::load_all("/Users/johf/Documents/GitHub/MitochondrialFunctionAnalyses")
##################################################
##                                              ##
##    User-friendly function for graphing       ##
##     the number of genes in a filtered        ##
##    dataset or the percentage of genes in     ##
##   in this dataset that occupy a pathway      ##
##                                              ##
##################################################
bar_graphs_mitocarta <- list()
for(plot_name in c("Primary","OXPHOS","Metabolism","Metals and cofactors",
"Lipid metabolism", "Carbohydrate metabolism", "Amino acid metabolism")){
temp_plot <- plot_mitocarta_pathways(filtered_data = data_filtered,
mitocarta_data = mitocarta_data,
subpath = plot_name,
fc_name = "log2FC_mean")
bar_graphs_mitocarta[[plot_name]] <- temp_plot
print(temp_plot[["GeneNumber"]])
temp_plot_no_legend <- temp_plot[["PathwayPercent"]] + ggplot2::theme(legend.position = "none")
print(temp_plot_no_legend)
}
logFC_legend <- cowplot::get_legend(temp_plot[["PathwayPercent"]])
grid.newpage()
grid.draw(logFC_legend)
temp_local = "/Users/johf/Dropbox (University of Michigan)/from_box/BURANT LAB/Mitochondrial-Function/Beard-Mito-Respiration/RNA-Seq-Analysis-NEW/NewFigures/"
w = list(`Primary` = 416,
`OXPHOS` = 354,
`Metabolism` = 339,
`Metals and cofactors` = 437,
`Lipid metabolism` = 408,
`Carbohydrate metabolism` = 352,
`Amino acid metabolism` = 473
)
h = list(`Primary` = 186,
`OXPHOS` = 217,
`Metabolism` = 217,
`Metals and cofactors` = 264,
`Lipid metabolism` = 183,
`Carbohydrate metabolism` = 216,
`Amino acid metabolism` = 264
)
for(plot_name in c("Primary","OXPHOS","Metabolism","Metals and cofactors",
"Lipid metabolism", "Carbohydrate metabolism", "Amino acid metabolism")){
for(plot_type in c("GeneNumber","PathwayPercent"){
temp_local = "/Users/johf/Dropbox (University of Michigan)/from_box/BURANT LAB/Mitochondrial-Function/Beard-Mito-Respiration/RNA-Seq-Analysis-NEW/NewFigures/"
w = list(`Primary` = 416,
`OXPHOS` = 354,
`Metabolism` = 339,
`Metals and cofactors` = 437,
`Lipid metabolism` = 408,
`Carbohydrate metabolism` = 352,
`Amino acid metabolism` = 473
)
h = list(`Primary` = 186,
`OXPHOS` = 217,
`Metabolism` = 217,
`Metals and cofactors` = 264,
`Lipid metabolism` = 183,
`Carbohydrate metabolism` = 216,
`Amino acid metabolism` = 264
)
for(plot_name in c("Primary","OXPHOS","Metabolism","Metals and cofactors",
"Lipid metabolism", "Carbohydrate metabolism", "Amino acid metabolism")){
for(plot_type in c("GeneNumber","PathwayPercent")){
plot_save = bar_graphs_mitocarta[[plot_name]][[plot_type]] + ggplot2::theme(legend.position = "none")
ggsave(plot = plot_save,
filename = paste0(temp_local, plot_name, "-", plot_type, ".jpeg"),
width = w[[plot_name]], height = h[[plot_name]], units = "px")
}
}
temp_local = "/Users/johf/Dropbox (University of Michigan)/from_box/BURANT LAB/Mitochondrial-Function/Beard-Mito-Respiration/RNA-Seq-Analysis-NEW/NewFigures/"
w = list(`Primary` = 416,
`OXPHOS` = 354,
`Metabolism` = 339,
`Metals and cofactors` = 437,
`Lipid metabolism` = 408,
`Carbohydrate metabolism` = 352,
`Amino acid metabolism` = 473
)
h = list(`Primary` = 186,
`OXPHOS` = 217,
`Metabolism` = 217,
`Metals and cofactors` = 264,
`Lipid metabolism` = 183,
`Carbohydrate metabolism` = 216,
`Amino acid metabolism` = 264
)
for(plot_name in c("Primary","OXPHOS","Metabolism","Metals and cofactors",
"Lipid metabolism", "Carbohydrate metabolism", "Amino acid metabolism")){
for(plot_type in c("GeneNumber","PathwayPercent")){
plot_save = bar_graphs_mitocarta[[plot_name]][[plot_type]] + ggplot2::theme(legend.position = "none")
ggsave(plot = plot_save,
filename = paste0(temp_local, plot_name, "-", plot_type, ".pdf"),
width = w[[plot_name]], height = h[[plot_name]], units = "px")
}
}
temp_local = "/Users/johf/Dropbox (University of Michigan)/from_box/BURANT LAB/Mitochondrial-Function/Beard-Mito-Respiration/RNA-Seq-Analysis-NEW/NewFigures/"
w = list(`Primary` = 4.16,
`OXPHOS` = 3.54,
`Metabolism` = 3.39,
`Metals and cofactors` = 4.37,
`Lipid metabolism` = 4.08,
`Carbohydrate metabolism` = 3.52,
`Amino acid metabolism` = 4.73
)
h = list(`Primary` = 1.86,
`OXPHOS` = 2.17,
`Metabolism` = 2.17,
`Metals and cofactors` = 2.64,
`Lipid metabolism` = 1.83,
`Carbohydrate metabolism` = 2.16,
`Amino acid metabolism` = 2.64
)
for(plot_name in c("Primary","OXPHOS","Metabolism","Metals and cofactors",
"Lipid metabolism", "Carbohydrate metabolism", "Amino acid metabolism")){
for(plot_type in c("GeneNumber","PathwayPercent")){
plot_save = bar_graphs_mitocarta[[plot_name]][[plot_type]] + ggplot2::theme(legend.position = "none")
ggsave(plot = plot_save,
filename = paste0(temp_local, plot_name, "-", plot_type, ".pdf"),
width = w[[plot_name]], height = h[[plot_name]], units = "in")
}
}
?ggsave
temp_local = "/Users/johf/Dropbox (University of Michigan)/from_box/BURANT LAB/Mitochondrial-Function/Beard-Mito-Respiration/RNA-Seq-Analysis-NEW/NewFigures/"
w = list(`Primary` = 4.16*1.39,
`OXPHOS` = 3.54*1.39,
`Metabolism` = 3.39*1.39,
`Metals and cofactors` = 4.37*1.39,
`Lipid metabolism` = 4.08*1.39,
`Carbohydrate metabolism` = 3.52*1.39,
`Amino acid metabolism` = 4.73*1.39
)
h = list(`Primary` = 1.86*1.39,
`OXPHOS` = 2.17*1.39,
`Metabolism` = 2.17*1.39,
`Metals and cofactors` = 2.64*1.39,
`Lipid metabolism` = 1.83*1.39,
`Carbohydrate metabolism` = 2.16*1.39,
`Amino acid metabolism` = 2.64*1.39
)
for(plot_name in c("Primary","OXPHOS","Metabolism","Metals and cofactors",
"Lipid metabolism", "Carbohydrate metabolism", "Amino acid metabolism")){
for(plot_type in c("GeneNumber","PathwayPercent")){
plot_save = bar_graphs_mitocarta[[plot_name]][[plot_type]] + ggplot2::theme(legend.position = "none")
ggsave(plot = plot_save,
filename = paste0(temp_local, plot_name, "-", plot_type, ".pdf"),
width = w[[plot_name]], height = h[[plot_name]], units = "in")
}
}
# Install package
devtools::install_github("johanna0321/MitochondrialFunctionAnalyses")
remove.packages("MitochondrialFunctionAnalyses")
# Install package
devtools::install_github("johanna0321/MitochondrialFunctionAnalyses")
library("MitochondrialFunctionAnalyses")
# Load package data
MitochondrialFunctionAnalyses::data(expected.counts.meta)
# Load package data
data(MitochondrialFunctionAnalyses::expected.counts.meta)
rm(list=ls())
# Set up the session with necessary packages
session_packages = c("DESeq2","ggplot2","tidyr","matrixStats","dplyr","RColorBrewer",
"pheatmap","ggplot2","CLEAN","CLEAN.Hs","CLEAN.Mm","CLEAN.Rn",
"AnnotationDbi","org.Rn.eg.db","org.Hs.eg.db","devtools","ggvenn",
"metap", "stringr", "cowplot")
for (lib_name in session_packages){
tryCatch({library(lib_name,character.only = T)}, error = function(e) {
print(paste("Cannot load",lib_name,"; please install"))
})
}
# Install package
devtools::install_github("johanna0321/MitochondrialFunctionAnalyses")
library("MitochondrialFunctionAnalyses")
# Load package data
data(expected.counts.meta)
data(expected.counts)
data(gene_name_conversion)
knitr::opts_chunk$set(echo = TRUE, out.height='50%',out.width='50%')
library("devtools")
devtools::check("/Users/johf/Documents/MitochondrialGeneAnalysis")
devtools::check("/Users/johf/Documents/MitochondrialGeneAnalysis")
devtools::check("/Users/johf/Documents/MitochondrialGeneAnalysis")
